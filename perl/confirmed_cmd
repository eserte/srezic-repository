=head2 confirmed_cmd($code, %opts)

=for category System

Wait for user confirmation, then execute the given code reference. Options:

=over

=item label => "..."

By default the source code of the code reference is presented to the
user, which can be overwritten with the label option.

=item cont_with => "..."

Usually the user needs only to hit "Return" to continu execution. With
this option the user is required to type exactly the value of
"cont_with".

=back

Recommendation: also use

    use autodie qw(:default :system);

If the global variable C<$confirmed_cmd::batch> is set to a true
value, then all confirmation questions are skipped.

=cut

sub confirmed_cmd (&;@) {
    my($code, %opt) = @_;
    my $label = delete $opt{label};
    my $cont_with = delete $opt{cont_with};
    die "Unhandled options: " . join(" ", %opt) if %opt;

    if (!defined $label) {
	my $pad_defs = "# cannot get lexicals, no PadWalker installed\n";
	if (eval { require PadWalker; require Data::Dumper; 1 }) {
	    my $list = PadWalker::closed_over($code);
	    my @pad_defs;
	    while(my($k,$v) = each %$list) {
		my $do_deref = ref($v) =~ m{^(SCALAR|REF)$};
		my $deref = $do_deref ? $$v : $v;
		my $dump = Data::Dumper->new([$deref],[ (!$do_deref ? '*' : '') . 'a'])->Indent(0)->Useqq(1)->Dump;
		if (length $dump > 60) {
		    $dump = substr($dump, 0, 60) . '...';
		}
		$dump =~ s{^.a\s*=\s*}{};
		my @dump = split /\n/, $dump;
		s{^}{    } for @dump[1..$#dump];
		push @pad_defs, "my $k = " . join("\n", @dump);
	    }
	    $pad_defs = @pad_defs ? "\n" . join("\n", map { "    $_" } @pad_defs) : '';
	    $pad_defs =~ s{\n$}{};
	}
	require B::Deparse;
	$label = B::Deparse->new->coderef2text($code);
	$label =~ s<^\s*BEGIN\s*\{(\s*\$\^H\{[^;]+;)+\s*\}><>m;
	$label =~ s{^\s*use strict 'refs';\s*\n}{}m;
	$label =~ s<^{><{$pad_defs>;
    }
    print STDERR "CALL $label ";
 CONFIRMATION: {
	{
	    no warnings 'once';
	    if ($confirmed_cmd::batch) {
		print STDERR "\n";
		last CONFIRMATION;
	    }
	}

	if (defined $cont_with && $cont_with ne '') {
	    print STDERR "(continue with '$cont_with') ";
	    while () {
		chomp(my $yn = <STDIN>);
		last if ($yn eq $cont_with);
		print STDERR "*** Please type '$cont_with' to continue ";
	    }
	} else {
	    <STDIN>;
	}
    }
    $code->();
}
