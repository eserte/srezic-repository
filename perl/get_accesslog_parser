=head1 get_accesslog_parser(...)

=for category Webserver

Create an accesslog parser, which takes a logline as a parameter (may
alternatively be in C<$_> variable) and returns a hashref of the
parsed fields.

=cut

{
    # The following was created with the help of Regexp::Common,
    # $RE{delimited}{-delim=>'"'}, but with only the payload "kept"
    my $delim_rx = qr{(?:(?:\")([^\\\"]*(?:\\.[^\\\"]*)*)(?:\"))};

    # XXX this should be configurable, e.g. in a yaml file. it would be
    # nice if the user could drop in a apache logformat line and this
    # would automatically turn into an regexp
    my $parse_logline_rx = qr{^
			      (?:([^:]+:\d+)\s+)? # only in other-vhosts
			      (\S+(?:,\s\S+)*)    # ips
			      \s+(\S+) # ?
			      \s+(\S+) # ?
			      \s+\[(\d+)/([^/]+)/(\d+):(\d+):(\d+):(\d+)\s+([+-]\d{4})\] # date time tzoffset
			      \s+\"(\S+)\s+(\S+)\s+(\S+)\" # http method, url, protocol
			      \s+(\d+) # status
			      \s+(-|\d+) # content length
			      \s+$delim_rx # referer
			      \s+$delim_rx # ua
			      (?:\s+(\d+(?:\.\d+)?(?:us)?))? # duration (maybe in microseconds or fractional seconds)
			   }x;
    my @logline_fields = qw(vhost0 ips XXX1 XXX2 date_d date_mon date_y time_h time_m time_s tzoffset method path proto status content_length referer ua duration);
    my %valid_logline_fields = map {($_ => 1)} @logline_fields;

    my %mon2m = qw(
        Jan 1 Feb 2 Mar 3 Apr 4 May 5 Jun 6
	Jul 7 Aug 8 Sep 9 Oct 10 Nov 11 Dec 12
	Dez 12
    );
    # Yes, I added "Dez" here. May happen for logback-created access logs.
    # More German (or other language) month names missing.
    # And it has to be checked if "Mär" would be latin1 or utf8.
    # See https://jira.qos.ch/browse/LOGBACK-302

    my $datetime_parser;
    our @GET_PARSER_ACCESSLOG_PREFERRED_DATETIME_PARSERS = qw(
	Time::Moment
	Time::Piece
	DateTime::Format::ISO8601
    );
    my %computed_fields_init = (
	epoch           => sub {
	    for my $try_parser (@GET_PARSER_ACCESSLOG_PREFERRED_DATETIME_PARSERS) {
		if ($try_parser eq 'Time::Moment') {
		    if (eval { require Time::Moment; 1 }) {
			$datetime_parser = 'TM';
			return;
		    }
		} elsif ($try_parser eq 'Time::Piece') {
		    if (eval { require Time::Piece; Time::Piece->VERSION(1.16); 1 }) { # %z handling not implemented for older Time::Piece
			$datetime_parser = 'TP';
			return;
		    }
		} elsif ($try_parser eq 'DateTime::Format::ISO8601') {
		    if (eval { require DateTime; require DateTime::Format::ISO8601; 1 }) {
			$datetime_parser = 'DT';
			return;
		    }
		} else {
		    die "Unhandled date/time parser '$try_parser'";
		}
	    }
	    die "No suitable date/time parser found (tried: @GET_PARSER_ACCESSLOG_PREFERRED_DATETIME_PARSERS)";
	},
	browser         => sub { require HTTP::BrowserDetect },
	browser_version => sub { require HTTP::BrowserDetect },
	os              => sub { require HTTP::BrowserDetect },
	os_version      => sub { require HTTP::BrowserDetect },
    );

    my $get_date = sub {
	my $fields_ref = shift;
	my $m = $mon2m{$fields_ref->{date_mon}};
	sprintf "%04d-%02d-%02d", $fields_ref->{date_y}, $m, $fields_ref->{date_d}
    };
    my $get_time = sub {
	my $fields_ref = shift;
	sprintf "%02d:%02d:%02d", @{$fields_ref}{qw(time_h time_m time_s)};
    };
    my $get_iso8601 = sub {
	my $fields_ref = shift;
	(my $tz = $fields_ref->{tzoffset}) =~ s/(?<=\d{2})/:/;
	$get_date->($fields_ref) . 'T' . $get_time->($fields_ref) . $tz;
    };

    my %computed_fields;
    %computed_fields = (
	date => sub {
	    $_[0]->{date} = $get_date->($_[0]);
	},
	time => sub {
	    $_[0]->{time} = $get_time->($_[0]);
	},
	iso8601 => sub {
	    $_[0]->{iso8601} = $get_iso8601->($_[0]);
	},
	epoch => sub {
	    my $fields_ref = shift;
	    ## works only if local time matches the accesslog timezone, thus disabled
	    #my $m = $mon2m{$fields_ref->{date_mon}};
	    #$m--;
	    #$fields_ref->{epoch} = Time::Local::timelocal(@{$fields_ref}{qw(time_s time_m time_h date_d)}, $m, $fields_ref->{date_y});
	    my $iso8601 = $get_iso8601->($fields_ref);
	    if ($datetime_parser eq 'TM') {
		$fields_ref->{epoch} = Time::Moment->from_string($iso8601)->epoch;
	    } elsif ($datetime_parser eq 'TP') {
		$iso8601 =~ s/:(?=\d{2}$)//; # Time::Piece can deal only with +0100, not +01:00
		$fields_ref->{epoch} = Time::Piece->strptime($iso8601, "%Y-%m-%dT%H:%M:%S%z")->epoch;
	    } elsif ($datetime_parser eq 'DT') {
		$fields_ref->{epoch} = DateTime::Format::ISO8601->parse_datetime($iso8601)->epoch;
	    } else {
		die "Should not happen (\$datetime_parser=$datetime_parser)";
	    }
	}
    );
    my %computed_optional_fields = (
	browser => sub {
	    my $fields_ref = shift;
	    $fields_ref->{_hbd} ||= HTTP::BrowserDetect->new($fields_ref->{ua});
	    $fields_ref->{browser} = $fields_ref->{_hbd}->browser || '???';
	},
	browser_version => sub {
	    my $fields_ref = shift;
	    $fields_ref->{_hbd} ||= HTTP::BrowserDetect->new($fields_ref->{ua});
	    $fields_ref->{browser_version} = $fields_ref->{_hbd}->browser_version || '???';
	},
	os => sub {
	    my $fields_ref = shift;
	    $fields_ref->{_hbd} ||= HTTP::BrowserDetect->new($fields_ref->{ua});
	    $fields_ref->{os} = $fields_ref->{_hbd}->os || '???';
	},
	os_version => sub {
	    my $fields_ref = shift;
	    $fields_ref->{_hbd} ||= HTTP::BrowserDetect->new($fields_ref->{ua});
	    $fields_ref->{os_version} = $fields_ref->{_hbd}->os_version || '???';
	},
    );

    sub get_accesslog_parser {
	my(%opts) = @_;
	my @output_fields = exists $opts{'fields'} ? @{ delete $opts{'fields'} } : ();
	die "Unhandled options: " . join(" ", %opts) if %opts;

	if (!@output_fields) {
	    @output_fields = (@logline_fields, sort keys %computed_fields);
	}

	my @compute_callbacks;
	my $do_add_logline_field;

	for my $field (@output_fields) {
	    if ($computed_fields_init{$field}) {
		$computed_fields_init{$field}->();
	    }
	}

	{
	    my @invalid_fields;
	    for (@output_fields) {
		if ($computed_fields{$_}) {
		    push @compute_callbacks, $computed_fields{$_};
		} elsif ($computed_optional_fields{$_}) {
		    push @compute_callbacks, $computed_optional_fields{$_};
		} elsif ($_ eq 'logline') {
		    $do_add_logline_field = 1;
		} elsif (!$valid_logline_fields{$_}) {
		    push @invalid_fields, $_;
		}
	    }
	    if (@invalid_fields) {
		die <<EOF;
Invalid fields: @invalid_fields
Valid fields are: @logline_fields @{[ keys %valid_logline_fields ]}
EOF
	    }
	}

	sub ($) {
	    my $logline = $_[0];
	    chomp $logline;
	    if (my @fields = $logline =~ $parse_logline_rx) {
		my %fields; @fields{@logline_fields} = @fields;
		{
		    no warnings 'uninitialized';
		    if ($fields{duration} =~ m{^(\d+)us$}) {
			$fields{duration} = $1/1_000_000;
		    }
		}
		for (@compute_callbacks) { $_->(\%fields) }
		if ($do_add_logline_field) {
		    $fields{logline} = $logline;
		}
		return {
		    map { ($_ => $fields{$_}) } @output_fields
		};
	    } else {
		return {
		    error => 'cannot parse logline',
		    ($do_add_logline_field ? (logline => $logline) : ()),
		};
	    }
	};
    }
}
